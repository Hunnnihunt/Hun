def merge_sort(data):
    # Jika panjang data lebih dari 1, lakukan pembagian
    if len(data) > 1:
        
        # Menentukan titik tengah untuk membagi data
        mid = len(data) // 2
        left_half = data[:mid]   # Membagi bagian kiri
        right_half = data[mid:]  # Membagi bagian kanan

        # Panggil merge_sort secara rekursif untuk kedua bagian
        merge_sort(left_half)
        merge_sort(right_half)

        # Indeks untuk bagian kiri, kanan, dan data utama
        i = j = k = 0

        # Gabungkan dua data yang sudah terurut
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                data[k] = left_half[i]
                i += 1
            else:
                data[k] = right_half[j]
                j += 1
            k += 1

        # Menyelesaikan sisa elemen pada bagian kiri (jika ada)
        while i < len(left_half):
            data[k] = left_half[i]
            i += 1
            k += 1

        # Menyelesaikan sisa elemen pada bagian kanan (jika ada)
        while j < len(right_half):
            data[k] = right_half[j]
            j += 1
            k += 1

# Contoh penggunaan
data = [38, 27, 43, 3, 9, 82, 10]
merge_sort(data)
print("Data yang telah diurutkan:", data)
